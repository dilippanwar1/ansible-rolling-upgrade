---

- hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
     - group_vars/all.yml

  pre_tasks:

    - include_vars:
        file: openstack/keystonerc_production.yaml
      when: target == 'production'

    - include_vars:
        file: openstack/keystonerc_staging.yaml
      when: target == 'staging'

    - name: authenticate to cloud
      os_auth:
      environment: "{{ openstack_environment }}"

  tasks:

  - name: create networks
    os_network:
      name: "{{ item }}"
      state: present
    environment: "{{ openstack_environment }}"
    with_items:
      - database
      - web
    tags: network

  - name: create subnets
    os_subnet:
      name: "{{ item.subnet }}"
      network_name: "{{ item.network }}"
      dns_nameservers: "{{ item.dns }}"
      cidr: "{{ item.cidr }}"
      state: present
    environment: "{{ openstack_environment }}"
    with_items:
      - { network: database, subnet: database-subnet, cidr: 172.16.0.0/16, dns: 192.168.26.1 }
      - { network: web, subnet: web-subnet, cidr: 172.17.0.0/16, dns: 192.168.26.1 }
    tags: network

  - name: create router
    os_router:
      name: router
      network: external-net
      interfaces:
        - database-subnet
        - web-subnet
      state: present
    environment: "{{ openstack_environment }}"
    tags: network

  - name: create database server
    os_server:
      name: "postgresql-{{ target }}"
      key_name: "{{ target }}"
      image: rhel-7.3-53-minimal
      flavor: m1.small
      boot_from_volume: yes
      terminate_volume: yes
      volume_size: 10
      floating_ip_pools: external-net
      network: database
      security_groups:
        - ssh_icmp
        - postgres
      meta: "app-tier=database"
    environment: "{{ openstack_environment }}"
    register: database_server
    tags:
      - servers
      - database-server

  - name: create web servers
    os_server:
      name: "{{ item }}-{{ target }}"
      key_name: "{{ target }}"
      image: rhel-7.3-53-rails
      flavor: m1.small
      boot_from_volume: yes
      terminate_volume: yes
      volume_size: 10
      floating_ip_pools: external-net
      network: web
      security_groups:
        - ssh_icmp
        - rails
      meta: "app-tier=web"
    environment: "{{ openstack_environment }}"
    with_items:
      - railsapp-1
      - railsapp-2
    register: web_servers
    tags:
      - servers
      - web-servers

  - add_host:
      name: "{{ item.server.id }}"
      ansible_ssh_user: cloud-user
      ansible_host: "{{ item.server.accessIPv4 }}"
      ansible_ssh_private_key_file: "openstack/{{ target }}.pem"
      ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
      ansible_become: true
      tenant_ip: "{{ item.server.private_v4 }}"
      group: web-servers
    with_items:
       - "{{ web_servers.results }}"
    tags:
      - servers
      - database-server

  - add_host:
      name: "{{ database_server.server.id }}"
      ansible_ssh_user: cloud-user
      ansible_host: "{{ database_server.server.accessIPv4 }}"
      ansible_ssh_private_key_file: "openstack/{{ target }}.pem"
      ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
      ansible_become: true
      openstack:
        private_v4: "{{ database_server.server.private_v4 }}"
      group: database-server
    tags:
      - servers
      - web-servers

  - name: wait for systems to become available
    wait_for: port=22 state=started host={{ item.server.accessIPv4 }}
    with_items:
      - "{{ database_server }}"
      - "{{ web_servers.results }}"
    tags: server

  - block:
      - name: check for existing load balancer
        shell: neutron lbaas-loadbalancer-list -f json
        register: load_balancers
        environment: "{{ openstack_environment }}"
        tags: lbaas

      - set_fact:
          load_balancer: true
        when: load_balancers.stdout|from_json|length > 0

      - name: create load balancer instance
        shell: neutron lbaas-loadbalancer-create --name load-balancer web-subnet -f json
        register: load_balancer_create
        environment: "{{ openstack_environment }}"
        when: load_balancer is undefined

      - name: get load balancer facts
        shell: neutron lbaas-loadbalancer-show load-balancer -f json
        register: load_balancer_facts
        environment: "{{ openstack_environment }}"

      - set_fact:
          lbaas_instance: "{{ load_balancer_facts.stdout|from_json }}"

      - name: get security group facts
        shell: neutron security-group-show rails -f json
        register: security_group_facts
        environment: "{{ openstack_environment }}"

      - set_fact:
          security_group: "{{ security_group_facts.stdout|from_json }}"

      - name: get load balancer port facts
        shell: neutron port-show {{ lbaas_instance.vip_port_id }} -f json
        register: load_balancer_port_facts
        environment: "{{ openstack_environment }}"

      - set_fact:
          load_balancer_port: "{{ load_balancer_port_facts.stdout|from_json }}"

      - name: apply security group to load balancer
        shell: neutron port-update --security-group rails {{ lbaas_instance.vip_port_id }}
        environment: "{{ openstack_environment }}"
        when: security_group.id not in load_balancer_port.security_groups

      - name: check for existing listener
        shell: neutron lbaas-listener-list -f json
        environment: "{{ openstack_environment }}"
        register: listener_list

      - set_fact:
          listeners: "{{ listener_list.stdout|from_json }}"

      - set_fact:
          listener: true
        when: listeners|length > 0

      - name: create listener for load balancer
        shell: neutron lbaas-listener-create --name load-balancer-listener --loadbalancer load-balancer --protocol HTTP --protocol-port 3000
        environment: "{{ openstack_environment }}"
        when: listener is not defined

      - name: get listener facts
        shell: neutron lbaas-listener-show load-balancer-listener -f json
        register: listener_facts
        environment: "{{ openstack_environment }}"

      - set_fact:
          listener_instance: "{{ listener_facts.stdout|from_json }}"

      - name: check for existing pool
        shell: neutron lbaas-pool-list -f json
        environment: "{{ openstack_environment }}"
        register: pool_list

      - set_fact:
          pools: "{{ pool_list.stdout|from_json }}"

      - set_fact:
          pool: true
        when: pools|length > 0

      - name: create pool for load balancer members
        shell: neutron lbaas-pool-create --name load-balancer-pool --lb-algorithm ROUND_ROBIN --listener load-balancer-listener --protocol HTTP
        environment: "{{ openstack_environment }}"
        when: pool is not defined

      - name: check for existing pool members
        shell: neutron lbaas-member-list load-balancer-pool -f json
        environment: "{{ openstack_environment }}"
        register: member_list

      - set_fact:
          members: "{{ member_list.stdout|from_json }}"

      - name: check if web servers are members of the pool
        shell: neutron lbaas-member-show {{ item.server.name }} load-balancer-pool
        environment: "{{ openstack_environment }}"
        with_items:
          - "{{ web_servers.results }}"
        when: members|length > 0

      - name: create pool members for web servers
        shell: neutron lbaas-member-create --name {{ item.server.name }} --subnet web-subnet --address {{ item.server.private_v4 }}  --protocol-port 3000 load-balancer-pool
        environment: "{{ openstack_environment }}"
        with_items:
          - "{{ web_servers.results }}"
        when: members|length == 0

      - name: check for existing floating ip
        shell: neutron floatingip-list -f json
        environment: "{{ openstack_environment }}"
        register: floatingip_list

      - set_fact:
          floatingips: "{{ floatingip_list.stdout|from_json }}"

      - set_fact:
          floatingip: "{{ floatingips|selectattr('port_id', 'match', lbaas_instance.vip_port_id)|first }}"
        when: floatingips|length > 0 and floatingips|selectattr('port_id', 'match', lbaas_instance.vip_port_id)|list|length>0

      - name: associate floating ip to load balancer
        shell: neutron floatingip-create --port-id {{ lbaas_instance.vip_port_id }} external-net -f json
        environment: "{{ openstack_environment }}"
        register: floatingip_association
        when: floatingip is not defined

      - set_fact:
          floatingip_created: "{{ floatingip_association.stdout|from_json }}"
        when: floatingip is not defined

      - set_fact:
          floatingip: "{{ floatingip_created }}"
        when: floatingip is not defined

    tags: lbaas

...
